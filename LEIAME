
MAC0448-2012: Programação para Redes de Computadores.
Terceiro Exercício-Programa: Simulador de Protocolos de Roteamento

Alunos:                     Nº USP:
  Thiago de Gouveia Nunes     6797289
  Wilson Kazuo Mizutani       6797230


I. Organização dos arquivos.


  Nosso EP deve apresentar a seguinte organização de arquivos e pastas:

    ep3-thiago-wilson/
    |- Makefile
    |- objs.makefile
    |- deps.makefile
    |- LEIAME
    |- src/
    |  |- main.cxx
    |  |- ...demais arquivos de código fonte...


II. Compilação.


  O programa vem com um Makefile para compilá-lo. Basta usar o comando

    $ make

  para compilar o EP normalmente, ou

    $ make debug

  para compilar com flags de depuração. Se o programa foi compilado normalmente
alguma vez antes, então é preciso usar

    $ make clean

  antes de tentar compilar no modo de depuração.


III. Dependências.


  Usamos apenas as bibliotecas padrão, incluindo o Technichal Report 1,
disponível no mínimo desde o Ubuntu 10.10 e do Debian Stable atual. Supomos que
o programa será compilado e executado em um Linux como esses (como é o caso da
RedeLinux do IME, por exemplo).


IV. Modo de uso do programa.


  Como pede o enunciado, nosso programa segue a seguinte assinatura de linha de
comando:

    ./ep3 <arquivo_de_entrada>

  Onde:

    <arquivo_de_entrada>  É um arquivo de topologia de rede, como especificado
                          no enunciado.

  Quando o programa roda, ele inicializa as tabelas de roteamento dos roteadores
para depois entrar em um prompt. No prompt, os comandos aceitos também são
exatamente aqueles especificados no enunciado.


V. Abstração da Rede


  No EP temos duas classes principais: Network e Router. Juntas elas formam uma
abstração da rede simulada.

  A classe Network mantém as informações da topologia da rede e controla o fluxo
de pacotes entre os elementos da rede. Quando algum roteador envia uma mensagem
pela rede, seja para algum destino particular ou em broadcast, a rede constrói
os pacotes correspondentes e guarda eles numa fila. Um pacote desses é criado
apenas para os roteadores que forem alvos válidos para ele, mesmo que ele esteja
ao alcance do pacote - ou seja, roteadores não podem ouvir mensagens que não são
para eles. A lógica do programa, nos momentos em que simula a rede, extrai os
pacotes da fila e entrega-os aos devidos roteadores. Esse processo é repetido
quantas vezes forem necessárias.

  Isso significa, basicamente, que quando um roteador envia uma mensagem, o
roteador receptor não reage imediatamente. É preciso que chegue a vez do pacote
de ser removida da fila de transmissões da Network para que finalmente o
roteador alvo receba o pacote.

  A classe Router representa os roteadores da rede. Existe um objeto dessa
classe para cada roteador. Todo roteador tem um ID, que é um inteiro não
negativo e funciona exatamente como se fosse o endereço dele na rede. A classe
Router tem dois tipos bem diferentes de métodos. O primeiro deles funciona
normalmente, tendo que ser chamado pela lógica do programa para ser executado,
e em geral acaba por enviar mensagens para a rede através da classe Network. Já
o segundo, são métodos que só são chamados em resposta a mensagens da rede.

  Assim, quando algum tipo de procesamento é exigido dos roteadores, o que se
faz é chamar um dos métodos do primeiro tipo - o que poderá fazer os roteadores
enviarem mensagens pela rede - para depois simular a rede usando a classe
Network - o que pode chamar os métodos do segundo tipo nos roteadores - até não
haver mais pacotes sendo enviados pela rede.


VI. Protocolo

  Os pacotes transmitidos pela rede têm o seguinte formato:

   +-----------+-------------+-----+
   | id_sender | id_receiver | msg |
   +-----------+-------------+-----+

  Onde:

    id_sender:    é o ID do remetente.
    id_receiver:  é o ID do destinatário.
    msg:          é a mensagem sendo transmitida.

  Os pacotes são abstraídos no código pela estrutura Network::Packet. Nela,
id_sender e id_receiver são do tipo unsigned, e msg é uma string.
  As mensagens, por sua vez, têm o seguinte formato:

   +----------+------+------+-----+
   | msg_type | arg1 | arg2 | ... |
   +----------+------+------+-----+

  Onde:

    msg_type:     é o tipo da mensagem.
    arg(i):       é o i-ésimo argumento da mensagem.

  Mensagens são abstraísdas no código como strings compostas por palavras
separadas por espaços. O tipo da mensagem é sempre a primeira palavra, e as
demais são os argumentos. A quantidade e os possíveis valores dos argumentos
dependem do tipo de mensagem.

  Segue uma descrição dos tipos de mensagens, agrupadas pelo protocolo da qual
fazem parte.

  (VI-a) Protocolo de Reconhecimento de Vizinhança

    Esse protocolo é o primeiro usado na execução do EP. Serve para os
  roteadores descobrirem seus vizinhos. Há dois tipos de mensagens nesse
  protocolo: HELLO e HELLO_ACK. Nenhuma delas recebe argumento algum.

    > HELLO

      É a mensagem de "cumprimento" dos roteadores. Cada um deles envia uma
    essas em broadcast, o que faz ela chegar em todos os seus vizinhos.
    Quem recebe um HELLO, por sua vez, deve responder com um HELLO_ACK ao
    remetente do pacote para que ele o reconheça como vizinho.

    > HELLO_ACK

      É a mensagem que os vizinhos mandando em reconhecimento à mensagem HELLO.
    Uma vez que um roteador recebe uma dessas, ele sabe que o remetente dela é
    um vizinho seu e guarda essa informação.

  (VI-b) Protocolo de Estado de Enlace

    Esse protocolo é usado para os roteadores descobrirem o estado de enlace de
  todos os outros roteadores na rede. Há dois tipos de mensagens usadas por esse
  protocolo: REQ_LINKSTATE e ANSWER_LINKSTATE.

    > REQ_LINKSTATE <origin> <destiny> [<step1> <step2> ...]

      É a mensagem que um roteador envia requisitando o estado de enlace de
    algum outro roteador, ou uma requisição que foi repassada. O argumento
    <origin> é o ID de quem fez a requisição e <destiny> é o ID do roteador
    para o qual está sendo feita a requisição. Quando o roteador que recebe essa
    mensagem é o destinatário da requisição, ele emite uma mensagem de
    ANSWER_LINKSTATE em resposta. Quando ele não é, ele repassa a mensagem.
      O argumento <step(i)> é o ID do i-ésimo roteador que repassou essa
    mensagem. Ele serve para evitar que a mensagem seja repassada para
    roteadores pelos quais ela já passou, e para saber um caminho pelo qual
    enviar a resposta quando a requisição chegar no seu objetivo.
      Quando o destinatário não é um vizinho do do roteador que recebeu a
    mensagem, ele a envia a repassa para todos os vizinhos que não estejam
    nos argumentos <step(i)>. Isso pode levar a requisições e respostas
    duplicadas, mas nesse caso os roteadores que fizeram a requisição
    ignoram a duplicata.

    > ANSWER_LINKSTATE <origin> <destiny> [<step1> ... "|"] <info1> <info2> ...

      É a mensagem que um roteador envia em resposta a uma requisição de estado
    de enlace, ou uma resposta que foi repassada. O argumento <origin> é o ID do
    roteador que enviou a resposta e <destiny> é o ID do que originalmente
    enviou a requisição, e espera pela resposta. Quando o roteador que recebe
    essa mensagem é quem fez a requisição, ele extrai as informações de estado
    de enlace desejadas dos argumentos <info(i)> e guarda na sua tabela de
    roteamento por estado de enlace local. Quando ele não é, ele repassa a
    resposta para o roteador cujo ID é o primeiro <step(i)> dos argumentos.
      O argumento <info(i)> contém informações do estado do i-ésimo enlace do
    roteador que está respondendo a erquisição. Essa informação fica no formato
    "id:delay", com "id" sendo ID de um vizinho do roteador e "delay" o atraso
    em milisegundos entre eles.
      O argumento "|" serve apenas para separar os argumentos <step(i)> dos
    <info(i)> quando necessário.
      Os argumentos <step(i)> formam uma rota que a mensagem deve seguir de
    volta para o roteador que fez a requisição. Quem inicialmente coloca ela na
    mensagem é o roteador para o qual foi feita a requisição de estado de
    enlace. Ele a coloca na ordem que deve ser seguida, isso é, inversa àquela
    pela qual a mensagem passou para chegar até ele. Cada roteador que repassa
    a mensagem retira dela o primeiro <step(i)>, de forma que o próximo só
    precisa sempre usar o primeiro deles. Quando não houver mais nenhum, é
    porque o destinatário da mensagem é vizinho do roteador atual.
      Para cada argumento <info(i)> que for um ID que o roteador que fez a
    requisição não conheça, ele envia uma nova requisição para esse ID. Assim,
    o processo começa com cada roteador requisitando seus vizinhos, depois os
    vizinhos dos vizinhos, e assim por diante até que todos conheçam todos.

  (VI-c) Protocolo de Vetor de Distâncias

    Esse protocolo é usado para os roteadores descobrirem os vetores de
  distâncias de seus vizinhos. Há apenas um tipo de mensagem nesse protocolo:
  DISTVECTOR.

  > DISTVECTOR <dist1> <dist2> ...

    É a mensagem que um roteador envia a seus vizinhos informando seu vetor de
  distâncias. Cada argumento <dist(i)> é uma das distâncias do roteador no
  formato "id:delay:hops", com "id" sendo o ID de algum outro roteador, "delay"
  o menor atraso total conhecido e "hops" o menor número de hops totais
  conhecido até esse outro roteador.
    Cada roteador que recebe essa mensagem, usa o critério do algoritmo de
  BELLMAN-FORD para verificar se seu vetor de distâncias local precisa ser
  atualizado. Caso ele seja, o roteador envia também uma mensagem DISTVECTOR
  informando seu novo vetor de distâncias.
    Como a rede é estática, esse processo converge e, no final, cada roteador
  terá em seu vetor de distâncias as distâncias mínimas - tanto em atraso como
  em hops - para cada um dos outros roteadores da rede, assim como o vetor de
  distância de seus vizinhos com a mesma propriedade.

  (VI-d) Protocolo de Roteamento por Vetor de Distâncias

    Esse protocolo é usado para os roteadores descobrirem uma rota entre dois
  deles. Diferentemente do algoritmo de Dijkstra que usa apenas tabela de estado
  de enlace completa do roteador de origem da rota, o algoritmo de roteamento
  com vetor de distâncias não tem todas as informações que precisa em um único
  roteador. Logo é preciso que a rota seja encontrada com a ajuda de outros
  roteadores, e para isso é usado este protocolo. Há dois tipos de mensagens
  muito parecidas nele: ROUTE_MS e ROUTE_HOP. Como se deve imaginar, a única
  diferença entre eles é que um usa o atraso como métrica de custo e o outro usa
  os hops para tanto. Por isso explicamos ambos de uma vez só:

  > ROUTE_{MS,HOP} <destiny> <cost> [<step1> <step2> ...]

    É a mensagem que os roteadores enviam para o próximo roteador mais próximo
  do destino da rota. O argumento <destiny> é o ID desse destino, e <cost> é o
  custo total da rota até o momento.
    Cada argumento <step(i)> é o ID de um roteador pela qual a rota já passou.
    O roteador que recebe essa mensagem usa o critério de BELLMAN-FORD e o seus
  vetores de distâncias locais para descobrir o próximo passo da rota. O
  roteador repassa a mensagem para ele, atualizando o custo total da rota, e
  adicionando seu ID como um argumento <step(i)> ao final da mensagem.
    Quando finalmente a mensagem chega ao roteador de destino, este guarda a
  sequência dos argumentos <step(i)> localmente, pois ela é a rota requisitada
  pelo usuário. A lógica do programa extrai essa informação do roteador quando
  ela percebe que o processo de roteamento chegou ao fim.


VII. Organização do código:

  main.cxx: arquivo com a função main().

  ep3.cxx e ep3.h: arquivos com a lógica geral do programa.
  (a simulação da rede e o prompt está aqui)

  network.cxx e network.h: arquivos com a classe Network.
  (o protocolo de pacotes está aqui)

  router.cxx e router.h: arquivos com a classe Router.
  (os protocolos de mensagens estão aqui)

